// Generated by CoffeeScript 1.10.0
(function() {
  var _, getField;

  _ = require('lodash');

  getField = function(table, fieldName) {
    var i, len, tableField, tableFields;
    fieldName = fieldName.replace(/_/g, ' ');
    tableFields = table.fields;
    for (i = 0, len = tableFields.length; i < len; i++) {
      tableField = tableFields[i];
      if (tableField.fieldName === fieldName) {
        return tableField;
      }
    }
    console.error('Cannot find field', table, fieldName);
    throw 'Cannot find field: ' + table.name + ' : ' + fieldName;
  };

  module.exports = function(sqlModel) {
    var addMapping, fieldName, i, idPart, idParts, len, part, ref, resourceField, resourceName, resourceToSQLMappings, resources, sqlFieldName, sqlTable, sqlTableName, table, tables;
    tables = sqlModel.tables;
    resources = {};
    resourceToSQLMappings = {};

    /**
    	*	resourceToSQLMappings =
    	*		[resourceName][resourceField] = [sqlTableName, sqlFieldName]
     */
    addMapping = function(resourceName, resourceField, sqlTableName, sqlFieldName) {
      return resourceToSQLMappings[resourceName][resourceField] = [sqlTableName, sqlFieldName];
    };
    for (resourceName in tables) {
      table = tables[resourceName];
      if (!(table.exists !== false)) {
        continue;
      }
      idParts = resourceName.split('-');
      resourceName = ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = idParts.length; i < len; i++) {
          idPart = idParts[i];
          results.push(idPart.split(/[ -]/).join('_'));
        }
        return results;
      })()).join('__');
      resourceToSQLMappings[resourceName] = {};
      if (_.isString(table)) {
        sqlTable = tables[idParts[0]];
        resourceToSQLMappings[resourceName]._name = sqlTable.name;
        sqlFieldName = sqlTable.idField;
        resourceField = sqlTableName = sqlTable.name;
        addMapping(resourceName, resourceField, sqlTableName, sqlFieldName);
        resources[resourceName] = {
          resourceName: resourceName,
          modelName: ((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = idParts.length; i < len; i++) {
              part = idParts[i];
              results.push(part.replace(/_/g, ' '));
            }
            return results;
          })()).join(' '),
          topLevel: idParts.length === 1,
          fields: [
            {
              dataType: 'ForeignKey',
              fieldName: resourceField,
              required: true,
              index: null,
              references: {
                tableName: sqlTableName,
                fieldName: sqlFieldName
              }
            }
          ],
          idField: resourceField,
          referenceScheme: resourceField,
          actions: ['view', 'add', 'delete']
        };
        switch (table) {
          case 'Attribute':
          case 'ForeignKey':
            resourceField = sqlFieldName = idParts[2].replace(/_/g, ' ');
            sqlTableName = sqlTable.name;
            addMapping(resourceName, resourceField, sqlTableName, sqlFieldName);
            resources[resourceName].fields.push(getField(sqlTable, sqlFieldName));
            resources[resourceName].referenceScheme = resourceField;
            break;
          case 'BooleanAttribute':
            resourceField = sqlFieldName = idParts[1].replace(/_/g, ' ');
            sqlTableName = sqlTable.name;
            addMapping(resourceName, resourceField, sqlTableName, sqlFieldName);
            resources[resourceName].fields.push(getField(sqlTable, sqlFieldName));
            resources[resourceName].referenceScheme = resourceField;
            break;
          default:
            throw 'Unrecognised table type';
        }
      } else {
        resourceToSQLMappings[resourceName]._name = table.name;
        resources[resourceName] = {
          resourceName: resourceName,
          modelName: ((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = idParts.length; i < len; i++) {
              part = idParts[i];
              results.push(part.replace(/_/g, ' '));
            }
            return results;
          })()).join(' '),
          topLevel: idParts.length === 1,
          fields: table.fields,
          idField: table.idField,
          actions: ['view', 'add', 'edit', 'delete']
        };
        if (table.referenceScheme != null) {
          resources[resourceName].referenceScheme = table.referenceScheme;
        }
        ref = table.fields;
        for (i = 0, len = ref.length; i < len; i++) {
          fieldName = ref[i].fieldName;
          addMapping(resourceName, fieldName.replace(/\ /g, '_'), table.name, fieldName);
        }
      }
    }
    return {
      resources: resources,
      resourceToSQLMappings: resourceToSQLMappings
    };
  };

}).call(this);
